{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","classNames","TodoList","todos","map","getUser","userId","usersFromServer","find","App","useState","selectedUserId","setSelecterUserId","setTitle","currentTodos","setCurrentTodos","errorTitle","setErrorTitle","errorUser","setErrorUser","action","method","type","placeholder","value","onChange","event","target","Number","disabled","onClick","preventDefault","newId","Math","max","selectedUser","trim","newTodo","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b51ec0ac.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/user';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const { completed, title, user } = todo;\n\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        key={todo.id}\n        todo={todo}\n      />\n    ))}\n  </section>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\nimport todosFromServer from './api/todos';\nimport usersFromServer from './api/users';\n\nimport { User } from './types/user';\nimport { Todo } from './types/todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n\nconst todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelecterUserId] = useState(0);\n  const [title, setTitle] = useState('');\n  const [currentTodos, setCurrentTodos] = useState(todos);\n  const [errorTitle, setErrorTitle] = useState(true);\n  const [errorUser, setErrorUser] = useState(true);\n\n  const handleUpdatingTodos = (event: React.MouseEvent) => {\n    event.preventDefault();\n\n    const newId = Math.max(...currentTodos.map(todo => todo.id)) + 1;\n    const selectedUser = getUser(selectedUserId);\n\n    if (selectedUser && title.trim()) {\n      const newTodo: Todo = {\n        id: newId,\n        userId: selectedUser.id,\n        title,\n        completed: false,\n        user: selectedUser,\n      };\n\n      setSelecterUserId(0);\n      setTitle('');\n      setCurrentTodos([...currentTodos, newTodo]);\n    }\n\n    if (!selectedUserId) {\n      setErrorUser(false);\n    }\n\n    if (!title.trim().length) {\n      setErrorTitle(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n      >\n        <div className=\"field\">\n          {'Title: '}\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Enter a title\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={(event) => {\n              setTitle(event.target.value);\n              setErrorTitle(true);\n            }}\n          />\n\n          {!errorTitle && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          {'User: '}\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUserId}\n            onChange={(event) => {\n              setSelecterUserId(Number(event.target.value));\n              setErrorUser(true);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {!errorUser && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={handleUpdatingTodos}\n        >\n          Add\n        </button>\n      </form>\n\n      <section className=\"TodoList\">\n        <TodoList\n          todos={currentTodos}\n        />\n      </section>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}